import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI, GenerativeModel } from '@google/generative-ai';

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private model: GenerativeModel;

  constructor(private readonly configService: ConfigService) {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');
    if (!apiKey) {
      this.logger.error('GEMINI_API_KEY is required');
      return;
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    this.model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
  }

  async generateResponse(prompt: string): Promise<string> {
    try {
      const result = await this.model.generateContent(prompt);
      const response = result.response;
      return response.text();
    } catch (error) {
      this.logger.error('Error generating response from Gemini:', error);
      throw new Error('Failed to generate AI response');
    }
  }

  async generateSalesResponse(
    userMessage: string,
    conversationContext: {
      conversationStage: string;
      userData: any;
      previousStage?: string;
      conversationHistory?: Array<{ role: 'user' | 'bot'; message: string }>;
      userProvidedName?: string;
    },
    language: string,
  ): Promise<string> {
    const systemPrompt = this.buildSalesPrompt(conversationContext, language);
    const languageReminder =
      language === 'ru'
        ? '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–¢–í–ï–ß–ê–ô –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!'
        : 'RESPOND IN ENGLISH ONLY!';

    // Add conversation history for context
    let conversationHistoryText = '';
    if (
      conversationContext.conversationHistory &&
      conversationContext.conversationHistory.length > 0
    ) {
      conversationHistoryText = '\n\nCONVERSATION HISTORY:\n';
      conversationContext.conversationHistory.forEach((msg, index) => {
        const role = msg.role === 'user' ? 'User' : 'Bot';
        conversationHistoryText += `${role}: ${msg.message}\n`;
      });
      conversationHistoryText += '\n';
    }

    const fullPrompt = `${systemPrompt}${conversationHistoryText}\n${languageReminder}\n\nCurrent user message: "${userMessage}"\n\n${languageReminder}\n\nGenerate an appropriate sales response that continues the conversation naturally:`;

    return this.generateResponse(fullPrompt);
  }

  private buildSalesPrompt(
    context: {
      conversationStage: string;
      userData: any;
      previousStage?: string;
      userProvidedName?: string;
    },
    language: string,
  ): string {
    const languageInstruction =
      language === 'ru'
        ? '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï! –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û!'
        : 'CRITICAL: RESPOND ONLY IN ENGLISH! NO OTHER LANGUAGES!';

    const basePrompt = `${languageInstruction}

üî• STAGE OVERRIDE ALERT üî•
CURRENT STAGE: ${context.conversationStage}
You MUST follow ONLY the instructions for this stage. Ignore everything else.

You are an AI sales chatbot representing Alex Antonenko, a professional backend developer and Tech Lead specializing in AI chatbot development for businesses.

ABOUT ALEX ANTONENKO:
- Professional backend developer and Tech Lead
- Can quickly assemble teams to deliver results
- Extensive experience in complex Enterprise software and startup MVPs
- Currently developing AI Sales ChatBot as Shopify Plugin
- Entrepreneur and co-founder of multiple online/offline businesses
- MBA background helps understand customer needs and provide valuable solutions

YOUR ROLE:
- Demonstrate how AI chatbots can boost sales
- Use proven sales techniques: SPIN selling (Situation, Problem, Implication, Need-payoff), AIDA (Attention, Interest, Desire, Action)
- Focus ONLY on AI chatbot services and solutions
- Collect customer data and understand their business needs
- Investigate risks of NOT implementing chatbot solutions
- Proactively guide customers toward ordering a Proof of Concept (PoC)

CURRENT CONVERSATION STAGE: ${context.conversationStage}
CUSTOMER DATA: ${JSON.stringify(context.userData)}
CUSTOMER NAME: ${context.userProvidedName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

${languageInstruction}

STAGE-SPECIFIC INSTRUCTIONS:
${this.getStageInstructions(context.conversationStage, language)}

CRITICAL DEMO REQUIREMENT:
This is a DEMO chatbot to show sales techniques. You MUST add a brief explanation in parentheses at the end of EVERY response explaining what sales technique you're using and why.

Examples:
- "(—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é rapport - –ª–∏—á–Ω–∞—è —Å–≤—è–∑—å –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ)"
- "(–≤—ã—è—Å–Ω—è—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ –º–µ—Ç–æ–¥—É SPIN - –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)"
- "(—Å–æ–∑–¥–∞—é urgency - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é)"
- "(building rapport - personal connection increases trust)"
- "(identifying problems - SPIN method requires understanding pain points)"

üö®üö®üö® CRITICAL STAGE ADHERENCE üö®üö®üö®
CURRENT STAGE: ${context.conversationStage}

IF STAGE IS "trust_building":
- You MUST say: "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, [–ò–ú–Ø]! –ö–∞–∫–∏–º –±–∏–∑–Ω–µ—Å–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?"
- FORBIDDEN: asking about mood, plans, weather, how they are  
- MANDATORY: ALWAYS end with the business question
- SALESPERSON RULE: Lead with questions, not statements

CURRENT STAGE ENFORCEMENT:
${this.getStageInstructions(context.conversationStage, language)}

‚ö†Ô∏è VIOLATION WARNING ‚ö†Ô∏è
If you violate stage instructions, you FAIL the task.

CRITICAL INSTRUCTIONS:
- Follow ONLY the stage-specific instructions above
- Keep response to 1-2 sentences + MANDATORY QUESTION
- EVERY response MUST end with a QUESTION to move conversation forward
- ALWAYS end with sales technique explanation in parentheses  
- Salespeople LEAD conversations with questions - never just make statements
- If customer name is known, use it occasionally (not every message) to personalize
- NO deviation from stage instructions allowed`;

    return basePrompt;
  }

  private getStageInstructions(stage: string, language: string): string {
    const instructions = {
      en: {
        name_collection:
          'ONLY ask for their name warmly. ABSOLUTELY NO mention of business, AI, chatbots, or sales. Just get their name and be friendly.',
        trust_building:
          "MANDATORY: say 'Nice to meet you, [NAME]! What business are you in?' IMPORTANT: ALWAYS end with a BUSINESS QUESTION. Salesperson LEADS with questions.",
        permission_request:
          'ONLY ask for permission to discuss their business. Be polite and respectful. Do NOT ask any actual business questions yet.',
        situation_discovery:
          'NOW you can ask about their business type and current processes. Use SPIN methodology - understand their SITUATION.',
        problem_identification:
          'Focus on finding their PROBLEMS and pain points. What challenges do they face?',
        implication_development:
          "Explore IMPLICATIONS of their problems. What happens if they don't solve these issues?",
        need_payoff:
          'Present the NEED-PAYOFF. How would solving their problems benefit them?',
        proposal:
          'Present your AI chatbot solution. Use AIDA - get attention, build interest, create desire.',
        closing:
          'Create urgency and guide toward action. Limited time offers, immediate benefits.',
        contact_collection:
          "FINAL STAGE: If contacts not collected yet - ask for them. If contacts received - say 'Thank you! Alex Antonenko will contact you soon. You can also reach him directly: @aleksandr_antonenko' and END conversation.",
        conversation_completed:
          'CONVERSATION ENDED: Thank them for their time, confirm Alex will contact them, give @aleksandr_antonenko contact. NO MORE questions. Just politely end.',
      },
      ru: {
        name_collection:
          '–¢–û–õ–¨–ö–û —Å–ø—Ä–æ—Å–∏—Ç–µ –∏–º—è —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ò–ö–ê–ö–ò–• —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞, –ò–ò, —á–∞—Ç-–±–æ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ—Å—Ç–æ —É–∑–Ω–∞–π—Ç–µ –∏–º—è –∏ –±—É–¥—å—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã.',
        trust_building:
          "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–∫–∞–∂–∏—Ç–µ: '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, [–ò–ú–Ø]! –ö–∞–∫–∏–º –±–∏–∑–Ω–µ—Å–æ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?' –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ –í–û–ü–†–û–°–û–ú –æ –±–∏–∑–Ω–µ—Å–µ. –ü—Ä–æ–¥–∞–≤–µ—Ü –í–ï–î–ï–¢ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
        permission_request:
          '–¢–û–õ–¨–ö–û –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±—Å—É–¥–∏—Ç—å –∏—Ö –±–∏–∑–Ω–µ—Å. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã. –ù–ï –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤.',
        situation_discovery:
          '–¢–ï–ü–ï–†–¨ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SPIN - –ø–æ–π–º–∏—Ç–µ –∏—Ö –°–ò–¢–£–ê–¶–ò–Æ.',
        problem_identification:
          '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø–æ–∏—Å–∫–µ –∏—Ö –ü–†–û–ë–õ–ï–ú –∏ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫. –° –∫–∞–∫–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –æ–Ω–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è?',
        implication_development:
          '–ò–∑—É—á–∏—Ç–µ –ü–û–°–õ–ï–î–°–¢–í–ò–Ø –∏—Ö –ø—Ä–æ–±–ª–µ–º. –ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–µ—à–∞—Ç —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã?',
        need_payoff:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –í–´–ì–û–î–£. –ö–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –∏—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏–Ω–µ—Å–µ—Ç –∏–º –ø–æ–ª—å–∑—É?',
        proposal:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ò–ò-—á–∞—Ç–±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AIDA - –ø—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã–∑–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å, —Å–æ–∑–¥–∞–π—Ç–µ –∂–µ–ª–∞–Ω–∏–µ.',
        closing:
          '–°–æ–∑–¥–∞–π—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã.',
        contact_collection:
          "–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–î–ò–Ø: –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã - —Å–ø—Ä–æ—Å–∏—Ç–µ –∏—Ö. –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã - —Å–∫–∞–∂–∏—Ç–µ '–°–ø–∞—Å–∏–±–æ! –ê–ª–µ–∫—Å –ê–Ω—Ç–æ–Ω–µ–Ω–∫–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é: @aleksandr_antonenko' –∏ –ó–ê–í–ï–†–®–ò–¢–ï —Ä–∞–∑–≥–æ–≤–æ—Ä.",
        conversation_completed:
          '–†–ê–ó–ì–û–í–û–† –ó–ê–í–ï–†–®–ï–ù: –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –∑–∞ –≤—Ä–µ–º—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –ê–ª–µ–∫—Å —Å–≤—è–∂–µ—Ç—Å—è, –¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç @aleksandr_antonenko. –ë–æ–ª—å—à–µ –ù–ï –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ—Å—Ç–æ –≤–µ–∂–ª–∏–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ.',
      },
    };

    return (
      instructions[language]?.[stage] ||
      instructions.en?.[stage] ||
      'Follow general sales best practices for this stage.'
    );
  }
}
