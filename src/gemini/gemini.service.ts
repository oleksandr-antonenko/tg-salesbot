import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI, GenerativeModel } from '@google/generative-ai';

@Injectable()
export class GeminiService {
  private readonly logger = new Logger(GeminiService.name);
  private model: GenerativeModel;

  constructor(private readonly configService: ConfigService) {
    const apiKey = this.configService.get<string>('GEMINI_API_KEY');
    if (!apiKey) {
      this.logger.error('GEMINI_API_KEY is required');
      return;
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    this.model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });
  }

  async generateResponse(prompt: string): Promise<string> {
    try {
      const result = await this.model.generateContent(prompt);
      const response = result.response;
      return response.text();
    } catch (error) {
      this.logger.error('Error generating response from Gemini:', error);
      throw new Error('Failed to generate AI response');
    }
  }

  async generateSalesResponse(
    userMessage: string,
    conversationContext: {
      conversationStage: string;
      userData: any;
      previousStage?: string;
    },
    language: string,
  ): Promise<string> {
    const systemPrompt = this.buildSalesPrompt(conversationContext, language);
    const languageReminder = language === 'ru' 
      ? '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–¢–í–ï–ß–ê–ô –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï!' 
      : 'RESPOND IN ENGLISH ONLY!';
    
    const fullPrompt = `${systemPrompt}\n\n${languageReminder}\n\nUser message: "${userMessage}"\n\n${languageReminder}\n\nGenerate an appropriate sales response:`;

    return this.generateResponse(fullPrompt);
  }

  private buildSalesPrompt(
    context: {
      conversationStage: string;
      userData: any;
      previousStage?: string;
    },
    language: string,
  ): string {
    const languageInstruction = language === 'ru' 
      ? '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–¢–í–ï–ß–ê–ô –¢–û–õ–¨–ö–û –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï! –ù–ò–ö–ê–ö–û–ì–û –ê–ù–ì–õ–ò–ô–°–ö–û–ì–û!' 
      : 'CRITICAL: RESPOND ONLY IN ENGLISH! NO OTHER LANGUAGES!';
    
    const basePrompt = `${languageInstruction}

You are an AI sales chatbot representing Alex Antonenko, a professional backend developer and Tech Lead specializing in AI chatbot development for businesses.

ABOUT ALEX ANTONENKO:
- Professional backend developer and Tech Lead
- Can quickly assemble teams to deliver results
- Extensive experience in complex Enterprise software and startup MVPs
- Currently developing AI Sales ChatBot as Shopify Plugin
- Entrepreneur and co-founder of multiple online/offline businesses
- MBA background helps understand customer needs and provide valuable solutions

YOUR ROLE:
- Demonstrate how AI chatbots can boost sales
- Use proven sales techniques: SPIN selling (Situation, Problem, Implication, Need-payoff), AIDA (Attention, Interest, Desire, Action)
- Focus ONLY on AI chatbot services and solutions
- Collect customer data and understand their business needs
- Investigate risks of NOT implementing chatbot solutions
- Proactively guide customers toward ordering a Proof of Concept (PoC)

CURRENT CONVERSATION STAGE: ${context.conversationStage}
CUSTOMER DATA: ${JSON.stringify(context.userData)}

${languageInstruction}

STAGE-SPECIFIC INSTRUCTIONS:
${this.getStageInstructions(context.conversationStage, language)}

CRITICAL DEMO REQUIREMENT:
This is a DEMO chatbot to show sales techniques. You MUST add a brief explanation in parentheses at the end of EVERY response explaining what sales technique you're using and why.

Examples:
- "(—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é rapport - –ª–∏—á–Ω–∞—è —Å–≤—è–∑—å –ø–æ–≤—ã—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ)"
- "(–≤—ã—è—Å–Ω—è—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ –º–µ—Ç–æ–¥—É SPIN - –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)"
- "(—Å–æ–∑–¥–∞—é urgency - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é)"
- "(building rapport - personal connection increases trust)"
- "(identifying problems - SPIN method requires understanding pain points)"

üö® CRITICAL STAGE ADHERENCE üö®
ABSOLUTELY FORBIDDEN: Do NOT mention business, AI, chatbots, sales, or any work-related topics unless you are in 'situation_discovery' stage or later.
MANDATORY: Follow ONLY the current stage instructions. IGNORE all other instructions if they conflict with the current stage.

CURRENT STAGE ENFORCEMENT:
${this.getStageInstructions(context.conversationStage, language)}

INSTRUCTIONS:
- Follow ONLY the stage-specific instructions above
- Be professional but engaging  
- Keep main response concise (2-3 sentences max)
- ALWAYS end with sales technique explanation in parentheses
- If current stage is name_collection or trust_building: NEVER mention business topics`;

    return basePrompt;
  }

  private getStageInstructions(stage: string, language: string): string {
    const instructions = {
      en: {
        name_collection: "ONLY ask for their name warmly. ABSOLUTELY NO mention of business, AI, chatbots, or sales. Just get their name and be friendly.",
        trust_building: "ONLY use their name and build personal connection. Ask about them personally (how they're doing, etc.). ABSOLUTELY FORBIDDEN to mention business, AI, chatbots, or ask any business-related questions.",
        permission_request: "ONLY ask for permission to discuss their business. Be polite and respectful. Do NOT ask any actual business questions yet.",
        situation_discovery: "NOW you can ask about their business type and current processes. Use SPIN methodology - understand their SITUATION.",
        problem_identification: "Focus on finding their PROBLEMS and pain points. What challenges do they face?",
        implication_development: "Explore IMPLICATIONS of their problems. What happens if they don't solve these issues?",
        need_payoff: "Present the NEED-PAYOFF. How would solving their problems benefit them?",
        proposal: "Present your AI chatbot solution. Use AIDA - get attention, build interest, create desire.",
        closing: "Create urgency and guide toward action. Limited time offers, immediate benefits."
      },
      ru: {
        name_collection: "–¢–û–õ–¨–ö–û —Å–ø—Ä–æ—Å–∏—Ç–µ –∏–º—è —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ê–ë–°–û–õ–Æ–¢–ù–û –ù–ò–ö–ê–ö–ò–• —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞, –ò–ò, —á–∞—Ç-–±–æ—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ—Å—Ç–æ —É–∑–Ω–∞–π—Ç–µ –∏–º—è –∏ –±—É–¥—å—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã.",
        trust_building: "–¢–û–õ–¨–ö–û –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –∏–º—è –∏ —Å—Ç—Ä–æ–π—Ç–µ –ª–∏—á–Ω—É—é —Å–≤—è–∑—å. –°–ø—Ä–æ—Å–∏—Ç–µ –æ –Ω–∏—Ö –ª–∏—á–Ω–æ (–∫–∞–∫ –¥–µ–ª–∞ –∏ —Ç.–ø.). –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û —É–ø–æ–º–∏–Ω–∞—Ç—å –±–∏–∑–Ω–µ—Å, –ò–ò, —á–∞—Ç-–±–æ—Ç—ã –∏–ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å—ã.",
        permission_request: "–¢–û–õ–¨–ö–û –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ–±—Å—É–¥–∏—Ç—å –∏—Ö –±–∏–∑–Ω–µ—Å. –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã. –ù–ï –∑–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤.",
        situation_discovery: "–¢–ï–ü–ï–†–¨ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SPIN - –ø–æ–π–º–∏—Ç–µ –∏—Ö –°–ò–¢–£–ê–¶–ò–Æ.",
        problem_identification: "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø–æ–∏—Å–∫–µ –∏—Ö –ü–†–û–ë–õ–ï–ú –∏ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫. –° –∫–∞–∫–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –æ–Ω–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è?",
        implication_development: "–ò–∑—É—á–∏—Ç–µ –ü–û–°–õ–ï–î–°–¢–í–ò–Ø –∏—Ö –ø—Ä–æ–±–ª–µ–º. –ß—Ç–æ —Å–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–µ—à–∞—Ç —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã?",
        need_payoff: "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –í–´–ì–û–î–£. –ö–∞–∫ —Ä–µ—à–µ–Ω–∏–µ –∏—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏–Ω–µ—Å–µ—Ç –∏–º –ø–æ–ª—å–∑—É?",
        proposal: "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ò–ò-—á–∞—Ç–±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AIDA - –ø—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –≤—ã–∑–æ–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å, —Å–æ–∑–¥–∞–π—Ç–µ –∂–µ–ª–∞–Ω–∏–µ.",
        closing: "–°–æ–∑–¥–∞–π—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∫ –¥–µ–π—Å—Ç–≤–∏—é. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã."
      }
    };

    return instructions[language]?.[stage] || instructions.en?.[stage] || "Follow general sales best practices for this stage.";
  }
}
