import { Injectable, Logger } from '@nestjs/common';
import { GeminiService } from '../gemini/gemini.service';
import * as langdetect from 'langdetect';

interface ConversationSession {
  userId: string;
  userName?: string;
  language: string;
  conversationStage: string;
  userData: {
    businessType?: string;
    currentChallenges?: string;
    budget?: string;
    timeline?: string;
    contactInfo?: string;
  };
}

interface ProcessMessageResponse {
  message: string;
  updatedSession?: Partial<ConversationSession>;
}

@Injectable()
export class SalesService {
  private readonly logger = new Logger(SalesService.name);

  constructor(private readonly geminiService: GeminiService) {}

  detectLanguage(text: string): Promise<string> {
    try {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
      const detected = (langdetect as any).detect(text) as Array<{
        lang: string;
        prob: number;
      }>;
      return Promise.resolve(detected[0]?.lang || 'en');
    } catch {
      this.logger.warn('Language detection failed, defaulting to English');
      return Promise.resolve('en');
    }
  }

  generateWelcomeMessage(language: string): Promise<string> {
    const welcomeMessages = {
      en: `ü§ñ Hi! I'm Alex's AI assistant, here to show you how AI chatbots can revolutionize your business sales!

Alex Antonenko is a seasoned Tech Lead and entrepreneur who's helped countless businesses boost their revenue with intelligent chatbot solutions.

What type of business are you running? I'd love to understand how we can help you grow! üöÄ`,
      ru: `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ê–ª–µ–∫—Å–∞, –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!

–ê–ª–µ–∫—Å –ê–Ω—Ç–æ–Ω–µ–Ω–∫–æ ‚Äî –æ–ø—ã—Ç–Ω—ã–π Tech Lead –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥ –±–µ—Å—á–∏—Å–ª–µ–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã —Å –ø–æ–º–æ—â—å—é —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤.

–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞? –•–æ—á—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞—Å—Ç–∏! üöÄ`,
    };

    return Promise.resolve(
      welcomeMessages[language as keyof typeof welcomeMessages] ||
        welcomeMessages.en,
    );
  }

  async processMessage(
    userMessage: string,
    session: ConversationSession,
  ): Promise<ProcessMessageResponse> {
    try {
      const language = await this.detectLanguage(userMessage);
      let updatedStage = session.conversationStage;
      const updatedUserData = { ...session.userData };

      // SPIN Selling approach - analyze conversation stage
      switch (session.conversationStage) {
        case 'greeting':
          updatedStage = 'situation_discovery';
          break;
        case 'situation_discovery': {
          const businessInfo = this.extractBusinessInfo(userMessage);
          if (businessInfo) {
            updatedUserData.businessType = businessInfo;
            updatedStage = 'problem_identification';
          }
          break;
        }
        case 'problem_identification': {
          const challenges = this.extractChallenges(userMessage);
          if (challenges) {
            updatedUserData.currentChallenges = challenges;
            updatedStage = 'implication_development';
          }
          break;
        }
        case 'implication_development':
          updatedStage = 'need_payoff';
          break;
        case 'need_payoff':
          updatedStage = 'proposal';
          break;
        case 'proposal':
          updatedStage = 'closing';
          break;
      }

      const response = await this.geminiService.generateSalesResponse(
        userMessage,
        {
          conversationStage: updatedStage,
          userData: updatedUserData,
          previousStage: session.conversationStage,
        },
        language,
      );

      return {
        message: response,
        updatedSession: {
          language,
          conversationStage: updatedStage,
          userData: updatedUserData,
        },
      };
    } catch (error) {
      this.logger.error('Error processing message:', error);
      const errorMessage =
        session.language === 'ru'
          ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ?'
          : 'Sorry, there was an error. Could you tell me more about your business?';

      return { message: errorMessage };
    }
  }

  private extractBusinessInfo(message: string): string | null {
    const businessKeywords = [
      'shop',
      'store',
      'retail',
      'ecommerce',
      'restaurant',
      'cafe',
      'hotel',
      'service',
      'consulting',
      'agency',
      'startup',
      'company',
      'business',
      '–º–∞–≥–∞–∑–∏–Ω',
      '—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
      '–∫–∞—Ñ–µ',
      '–æ—Ç–µ–ª—å',
      '—Å–µ—Ä–≤–∏—Å',
      '–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥',
      '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
      '—Å—Ç–∞—Ä—Ç–∞–ø',
      '–∫–æ–º–ø–∞–Ω–∏—è',
      '–±–∏–∑–Ω–µ—Å',
    ];

    const lowerMessage = message.toLowerCase();
    const foundKeyword = businessKeywords.find((keyword) =>
      lowerMessage.includes(keyword),
    );
    return foundKeyword ? message : null;
  }

  private extractChallenges(message: string): string | null {
    const challengeKeywords = [
      'problem',
      'issue',
      'challenge',
      'difficult',
      'struggle',
      'low sales',
      'customers',
      'support',
      'time',
      'busy',
      'expensive',
      '–ø—Ä–æ–±–ª–µ–º–∞',
      '—Å–ª–æ–∂–Ω–æ—Å—Ç—å',
      '—Ç—Ä—É–¥–Ω–æ—Å—Ç—å',
      '–Ω–∏–∑–∫–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
      '–∫–ª–∏–µ–Ω—Ç—ã',
      '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      '–≤—Ä–µ–º—è',
      '–∑–∞–Ω—è—Ç',
      '–¥–æ—Ä–æ–≥–æ',
    ];

    const lowerMessage = message.toLowerCase();
    const hasChallenge = challengeKeywords.some((keyword) =>
      lowerMessage.includes(keyword),
    );
    return hasChallenge ? message : null;
  }

  getSalesStagePrompt(stage: string, language: string): string {
    const prompts: Record<string, Record<string, string>> = {
      en: {
        situation_discovery:
          "Ask about their business type, size, and current customer interaction methods. Use SPIN: What's your current SITUATION?",
        problem_identification:
          'Identify specific PROBLEMS with current customer service or sales processes. What challenges are you facing?',
        implication_development:
          'Explore IMPLICATIONS: What happens if these problems persist? Lost sales? Customer dissatisfaction?',
        need_payoff:
          'Present NEED-PAYOFF: How would solving this improve their business? Increase sales, save time, better customer experience?',
        proposal:
          'Present AI chatbot solution tailored to their needs. Use AIDA: grab ATTENTION, build INTEREST, create DESIRE.',
        closing:
          'Create ACTION: Guide toward PoC order. Limited time offer, risk-free trial, immediate benefits.',
      },
      ru: {
        situation_discovery:
          '–°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. SPIN: –∫–∞–∫–∞—è —É –≤–∞—Å –°–ò–¢–£–ê–¶–ò–Ø?',
        problem_identification:
          '–í—ã—è–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ü–†–û–ë–õ–ï–ú–´ —Å —Ç–µ–∫—É—â–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø—Ä–æ–¥–∞–∂. –° –∫–∞–∫–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å?',
        implication_development:
          '–ò–∑—É—á–∏—Ç–µ –ü–û–°–õ–ï–î–°–¢–í–ò–Ø: —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è? –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏? –ù–µ–¥–æ–≤–æ–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?',
        need_payoff:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –í–´–ì–û–î–£: –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —É–ª—É—á—à–∏—Ç –±–∏–∑–Ω–µ—Å? –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂, —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏, –ª—É—á—à–∏–π –æ–ø—ã—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤?',
        proposal:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ò–ò-—á–∞—Ç–±–æ—Ç–∞ –ø–æ–¥ –∏—Ö –Ω—É–∂–¥—ã. AIDA: –ø—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –í–ù–ò–ú–ê–ù–ò–ï, –≤—ã–∑–æ–≤–∏—Ç–µ –ò–ù–¢–ï–†–ï–°, —Å–æ–∑–¥–∞–π—Ç–µ –ñ–ï–õ–ê–ù–ò–ï.',
        closing:
          '–°–æ–∑–¥–∞–π—Ç–µ –î–ï–ô–°–¢–í–ò–ï: –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∫ –∑–∞–∫–∞–∑—É PoC. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–π —Ç–µ—Å—Ç, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã.',
      },
    };

    return prompts[language]?.[stage] || prompts.en?.[stage] || '';
  }
}
