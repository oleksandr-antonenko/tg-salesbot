import { Injectable, Logger } from '@nestjs/common';
import { GeminiService } from '../gemini/gemini.service';
import { ConversationService } from '../database/conversation.service';
import * as langdetect from 'langdetect';

interface ConversationSession {
  userId: string;
  userName?: string;
  language: string;
  conversationStage: string;
  conversationId?: number;
  dbUserId?: number;
  userData: {
    businessType?: string;
    currentChallenges?: string;
    budget?: string;
    timeline?: string;
    contactInfo?: string;
  };
}

interface ProcessMessageResponse {
  message: string;
  updatedSession?: Partial<ConversationSession>;
  leadScore?: number;
  extractedData?: {
    businessType?: string;
    challenges?: string;
    budget?: string;
    urgency?: 'low' | 'medium' | 'high';
  };
}

@Injectable()
export class SalesService {
  private readonly logger = new Logger(SalesService.name);

  constructor(
    private readonly geminiService: GeminiService,
    private readonly conversationService: ConversationService,
  ) {}

  detectLanguage(text: string): Promise<string> {
    try {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access
      const detected = (langdetect as any).detect(text) as Array<{
        lang: string;
        prob: number;
      }>;
      return Promise.resolve(detected[0]?.lang || 'en');
    } catch {
      this.logger.warn('Language detection failed, defaulting to English');
      return Promise.resolve('en');
    }
  }

  generateWelcomeMessage(language: string): Promise<string> {
    const welcomeMessages = {
      en: `ü§ñ Hi! I'm Alex's AI assistant, here to show you how AI chatbots can revolutionize business sales!

Alex Antonenko is a seasoned Tech Lead and entrepreneur who's helped countless businesses boost their revenue with intelligent chatbot solutions.

Before we dive in, I'd love to get to know you better. What's your name? üòä`,
      ru: `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ê–ª–µ–∫—Å–∞, –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞!

–ê–ª–µ–∫—Å –ê–Ω—Ç–æ–Ω–µ–Ω–∫–æ ‚Äî –æ–ø—ã—Ç–Ω—ã–π Tech Lead –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥ –±–µ—Å—á–∏—Å–ª–µ–Ω–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥—ã —Å –ø–æ–º–æ—â—å—é —É–º–Ω—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤.

–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? üòä`,
    };

    return Promise.resolve(
      welcomeMessages[language as keyof typeof welcomeMessages] ||
        welcomeMessages.en,
    );
  }

  async processMessage(
    userMessage: string,
    session: ConversationSession,
    conversationHistory?: Array<{role: 'user' | 'bot', message: string}>,
  ): Promise<ProcessMessageResponse> {
    try {
      const language = session.language;
      this.logger.log(`Processing message: "${userMessage}" | Stage: "${session.conversationStage}" | Language: "${language}"`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      const extractedData = await this.analyzeUserMessage(userMessage, language);
      const leadScore = this.calculateLeadScore(userMessage, session, extractedData);
      
      this.logger.log(`AI Analysis: ${JSON.stringify(extractedData)} | Lead Score: ${leadScore}`);
      
      let updatedStage = session.conversationStage;
      const updatedUserData = { ...session.userData };

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
      if (extractedData.businessType) {
        updatedUserData.businessType = extractedData.businessType;
      }
      if (extractedData.challenges) {
        updatedUserData.currentChallenges = extractedData.challenges;
      }
      if (extractedData.budget) {
        updatedUserData.budget = extractedData.budget;
      }

      // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç–∞–¥–∏—è–º–∏ SPIN –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
      updatedStage = this.determineNextStage(session.conversationStage, extractedData, leadScore, userMessage);

      const response = await this.geminiService.generateSalesResponse(
        userMessage,
        {
          conversationStage: updatedStage,
          userData: updatedUserData,
          previousStage: session.conversationStage,
          conversationHistory,
        },
        language,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º lead score –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å conversationId
      if (session.conversationId && leadScore > 0) {
        await this.conversationService.updateConversationStage(
          session.conversationId,
          updatedStage
        );
      }

      return {
        message: response,
        updatedSession: {
          language,
          conversationStage: updatedStage,
          userData: updatedUserData,
        },
        leadScore,
        extractedData,
      };
    } catch (error) {
      this.logger.error('Error processing message:', error);
      const errorMessage =
        session.language === 'ru'
          ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ?'
          : 'Sorry, there was an error. Could you tell me more about your business?';

      return { message: errorMessage };
    }
  }



  getSalesStagePrompt(stage: string, language: string): string {
    const prompts: Record<string, Record<string, string>> = {
      en: {
        name_collection:
          'Build RAPPORT: Ask for their name to establish personal connection. Be warm and friendly.',
        trust_building:
          'Build TRUST: Show genuine interest, acknowledge their name, make them feel comfortable. Create safe environment.',
        permission_request:
          'Ask PERMISSION: Politely request permission to ask a few questions about their business. This shows respect.',
        situation_discovery:
          "Ask about their business type, size, and current customer interaction methods. Use SPIN: What's your current SITUATION?",
        problem_identification:
          'Identify specific PROBLEMS with current customer service or sales processes. What challenges are you facing?',
        implication_development:
          'Explore IMPLICATIONS: What happens if these problems persist? Lost sales? Customer dissatisfaction?',
        need_payoff:
          'Present NEED-PAYOFF: How would solving this improve their business? Increase sales, save time, better customer experience?',
        proposal:
          'Present AI chatbot solution tailored to their needs. Use AIDA: grab ATTENTION, build INTEREST, create DESIRE.',
        closing:
          'Create ACTION: Guide toward PoC order. Limited time offer, risk-free trial, immediate benefits.',
      },
      ru: {
        name_collection:
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –†–ê–ü–ü–û–†–¢: —Å–ø—Ä–æ—Å–∏—Ç–µ –∏–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–π —Å–≤—è–∑–∏. –ë—É–¥—å—Ç–µ —Ç–µ–ø–ª—ã–º–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏.',
        trust_building:
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –î–û–í–ï–†–ò–ï: –ø—Ä–æ—è–≤–∏—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–π –∏–Ω—Ç–µ—Ä–µ—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –∏–º–µ–Ω–∏, —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ä–µ–¥–∞.',
        permission_request:
          '–ü—Ä–æ—Å–∏—Ç–µ –†–ê–ó–†–ï–®–ï–ù–ò–ï: –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –±–∏–∑–Ω–µ—Å–µ. –≠—Ç–æ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —É–≤–∞–∂–µ–Ω–∏—è.',
        situation_discovery:
          '–°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞, —Ä–∞–∑–º–µ—Ä–µ –∏ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. SPIN: –∫–∞–∫–∞—è —É –≤–∞—Å –°–ò–¢–£–ê–¶–ò–Ø?',
        problem_identification:
          '–í—ã—è–≤–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ü–†–û–ë–õ–ï–ú–´ —Å —Ç–µ–∫—É—â–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –ø—Ä–æ–¥–∞–∂. –° –∫–∞–∫–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å?',
        implication_development:
          '–ò–∑—É—á–∏—Ç–µ –ü–û–°–õ–ï–î–°–¢–í–ò–Ø: —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è? –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏? –ù–µ–¥–æ–≤–æ–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?',
        need_payoff:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –í–´–ì–û–î–£: –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —É–ª—É—á—à–∏—Ç –±–∏–∑–Ω–µ—Å? –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂, —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏, –ª—É—á—à–∏–π –æ–ø—ã—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤?',
        proposal:
          '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ò–ò-—á–∞—Ç–±–æ—Ç–∞ –ø–æ–¥ –∏—Ö –Ω—É–∂–¥—ã. AIDA: –ø—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –í–ù–ò–ú–ê–ù–ò–ï, –≤—ã–∑–æ–≤–∏—Ç–µ –ò–ù–¢–ï–†–ï–°, —Å–æ–∑–¥–∞–π—Ç–µ –ñ–ï–õ–ê–ù–ò–ï.',
        closing:
          '–°–æ–∑–¥–∞–π—Ç–µ –î–ï–ô–°–¢–í–ò–ï: –Ω–∞–ø—Ä–∞–≤—å—Ç–µ –∫ –∑–∞–∫–∞–∑—É PoC. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –±–µ–∑—Ä–∏—Å–∫–æ–≤—ã–π —Ç–µ—Å—Ç, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤—ã–≥–æ–¥—ã.',
      },
    };

    return prompts[language]?.[stage] || prompts.en?.[stage] || '';
  }

  private async analyzeUserMessage(message: string, language: string): Promise<{
    businessType?: string;
    challenges?: string;
    budget?: string;
    urgency?: 'low' | 'medium' | 'high';
    hasName?: boolean;
    isPositiveResponse?: boolean;
    gavePermission?: boolean;
  }> {
    try {
      const analysisPrompt = `
        Analyze this user message VERY CAREFULLY and extract information:
        "${message}"
        
        Be EXTREMELY CONSERVATIVE in your analysis. Only return true for fields when you are 100% certain.
        
        Return a JSON object with extracted data:
        {
          "businessType": "only if explicitly mentioned business type (e.g., restaurant, shop, salon, etc.)",
          "challenges": "only if explicit business problems mentioned", 
          "budget": "only if explicit budget/money concerns mentioned",
          "urgency": "low/medium/high based on language urgency",
          "hasName": true/false (ONLY TRUE if message contains a clear person's name like '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä' or 'My name is John'),
          "isPositiveResponse": true/false (ONLY TRUE for clear positive responses like '–¥–∞', '—Ö–æ—Ä–æ—à–æ', '–∫–æ–Ω–µ—á–Ω–æ', 'yes', 'sure', 'ok'),
          "gavePermission": true/false (ONLY TRUE for explicit permission like '–¥–∞, –º–æ–∂–µ—Ç–µ', '–∫–æ–Ω–µ—á–Ω–æ, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ', 'yes, go ahead', 'sure, ask away')
        }
        
        BE CONSERVATIVE: When in doubt, return false/null. Don't guess or infer.
        
        Respond ONLY with valid JSON, no other text.
      `;
      
      const response = await this.geminiService.generateResponse(analysisPrompt);
      const cleanResponse = response.replace(/```json|```/g, '').trim();
      
      const result = JSON.parse(cleanResponse);
      this.logger.log(`AI Analysis result: ${JSON.stringify(result)}`);
      
      return result;
    } catch (error) {
      this.logger.warn('Failed to analyze user message:', error);
      return {};
    }
  }

  private calculateLeadScore(
    message: string, 
    session: ConversationSession, 
    extractedData: any
  ): number {
    let score = 0;
    
    // –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã = –≤—ã—à–µ –∏–Ω—Ç–µ—Ä–µ—Å)
    if (message.length > 50) score += 1;
    if (message.length > 100) score += 1;
    
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
    if (extractedData.businessType) score += 2;
    
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    if (extractedData.challenges) score += 2;
    
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
    if (extractedData.budget) score += 3;
    
    // –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if (extractedData.urgency === 'high') score += 3;
    if (extractedData.urgency === 'medium') score += 2;
    if (extractedData.urgency === 'low') score += 1;
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç–∞–¥–∏—è–º SPIN
    const stageScores = {
      'greeting': 1,
      'name_collection': 1,
      'trust_building': 2,
      'permission_request': 2,
      'situation_discovery': 3,
      'problem_identification': 4,
      'implication_development': 5,
      'need_payoff': 6,
      'proposal': 7,
      'closing': 8,
      'contact_collection': 10
    };
    
    score += stageScores[session.conversationStage] || 0;
    
    // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ (–∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ä–µ—à–µ–Ω–∏—é)
    const positiveWords = ['–¥–∞', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '—Ö–æ—á—É', '–Ω—É–∂–Ω–æ', '–ø–æ–¥—Ö–æ–¥–∏—Ç', 'yes', 'interested', 'want', 'need', 'sounds good'];
    const lowerMessage = message.toLowerCase();
    const positiveCount = positiveWords.filter(word => lowerMessage.includes(word)).length;
    score += positiveCount;
    
    return Math.min(score, 10); // –ú–∞–∫—Å–∏–º—É–º 10
  }

  private determineNextStage(
    currentStage: string,
    extractedData: any,
    leadScore: number,
    userMessage: string
  ): string {
    this.logger.log(`Stage transition analysis: ${currentStage} -> extractedData: ${JSON.stringify(extractedData)} -> leadScore: ${leadScore}`);
    
    switch (currentStage) {
      case 'greeting':
        return 'name_collection';
        
      case 'name_collection':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è (–ª—é–±–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
        const containsName = /^[–ê-–Ø–∞-—èA-Za-z\s]{2,20}$/.test(userMessage.trim());
        if (containsName || extractedData.hasName) {
          this.logger.log('Stage transition: name_collection -> trust_building (name detected)');
          return 'trust_building';
        }
        // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–±–æ—Ä–µ –∏–º–µ–Ω–∏
        return 'name_collection';
        
      case 'trust_building':
        // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã—è—Å–Ω–µ–Ω–∏—é –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        this.logger.log('Stage transition: trust_building -> situation_discovery (direct to business)');
        return 'situation_discovery';
        
      case 'permission_request':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–∞–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è —è–≤–Ω–æ
        const userRefused = userMessage.toLowerCase().includes('–Ω–µ—Ç') || 
                           userMessage.toLowerCase().includes('no') ||
                           userMessage.toLowerCase().includes('–Ω–µ —Ö–æ—á—É') ||
                           userMessage.toLowerCase().includes('–Ω–µ –Ω–∞–¥–æ');
        
        if (!userRefused) {
          this.logger.log('Stage transition: permission_request -> situation_discovery (no explicit refusal)');
          return 'situation_discovery';
        }
        return 'permission_request';
        
      case 'situation_discovery':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –±–∏–∑–Ω–µ—Å–µ (–ª—é–±–æ–π –æ—Ç–≤–µ—Ç –∫—Ä–æ–º–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã—Ö)
        if (userMessage.length > 3 || extractedData.businessType) {
          this.logger.log('Stage transition: situation_discovery -> problem_identification (business response received)');
          return 'problem_identification';
        }
        return 'situation_discovery';
        
      case 'problem_identification':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if (userMessage.length > 10 || extractedData.challenges) {
          this.logger.log('Stage transition: problem_identification -> implication_development (problem response received)');
          return 'implication_development';
        }
        return 'problem_identification';
        
      case 'implication_development':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        if (userMessage.length > 5 || leadScore >= 5) {
          this.logger.log('Stage transition: implication_development -> need_payoff (implications understood)');
          return 'need_payoff';
        }
        return 'implication_development';
        
      case 'need_payoff':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—è–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å
        if (userMessage.length > 3 || leadScore >= 5) {
          this.logger.log('Stage transition: need_payoff -> proposal (interest shown)');
          return 'proposal';
        }
        return 'need_payoff';
        
      case 'proposal':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫–∞–∑–∞–ª—Å—è
        if (userMessage.length > 2 || leadScore >= 4) {
          this.logger.log('Stage transition: proposal -> closing (ready to close)');
          return 'closing';
        }
        return 'proposal';
        
      case 'closing':
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è
        const userAgreed = userMessage.toLowerCase().includes('–¥–∞') || 
                          userMessage.toLowerCase().includes('yes') ||
                          userMessage.toLowerCase().includes('—Å–æ–≥–ª–∞—Å–µ–Ω') ||
                          userMessage.toLowerCase().includes('—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç') ||
                          userMessage.toLowerCase().includes('–ø–æ–¥—Ö–æ–¥–∏—Ç') ||
                          userMessage.toLowerCase().includes('agree') ||
                          userMessage.toLowerCase().includes('sure') ||
                          userMessage.toLowerCase().includes('ok');
        
        if (userAgreed) {
          this.logger.log('Stage transition: closing -> contact_collection (deal closed)');
          return 'contact_collection';
        }
        return 'closing';
        
      case 'contact_collection':
        return 'contact_collection'; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Å–±–æ—Ä–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        
      default:
        return 'name_collection';
    }
  }

  async getConversationAnalytics(conversationId: number): Promise<{
    totalMessages: number;
    averageLeadScore: number;
    stagesReached: string[];
    keyInsights: string[];
  }> {
    try {
      const conversation = await this.conversationService.getCurrentConversation(conversationId);
      if (!conversation) {
        return {
          totalMessages: 0,
          averageLeadScore: 0,
          stagesReached: [],
          keyInsights: []
        };
      }

      const userMessages = conversation.messages.filter(m => m.messageType === 'user');
      const stages = [...new Set(conversation.messages.map(m => m.conversationStage).filter(Boolean))];
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è insights
      const insights: string[] = [];
      let totalScore = 0;
      
      for (const message of userMessages) {
        const extractedData = await this.analyzeUserMessage(message.content, 'en');
        if (extractedData.businessType) {
          insights.push(`Business type: ${extractedData.businessType}`);
        }
        if (extractedData.challenges) {
          insights.push(`Challenge: ${extractedData.challenges}`);
        }
        if (extractedData.budget) {
          insights.push(`Budget concern: ${extractedData.budget}`);
        }
        
        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç lead score –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        totalScore += this.calculateLeadScore(message.content, {} as ConversationSession, extractedData);
      }

      return {
        totalMessages: userMessages.length,
        averageLeadScore: userMessages.length > 0 ? totalScore / userMessages.length : 0,
        stagesReached: stages,
        keyInsights: [...new Set(insights)] // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      };
    } catch (error) {
      this.logger.error('Error analyzing conversation:', error);
      return {
        totalMessages: 0,
        averageLeadScore: 0,
        stagesReached: [],
        keyInsights: []
      };
    }
  }
}
